---
title: "TITLE"
subtitle: "University of Florida Dept. of Biostatistics - Bacher Group"
author: "Jack Leary, M.S."
date: "`r Sys.Date()`"
format:
  html:
    theme: journal
    highlight-style: tango
    code-fold: show
    code-tools: true
    code-copy: hover
    code-download: true
    toc: true
    self-contained: true
execute: 
  cache: true
---

```{r setup, echo=FALSE, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE); set.seed(312)  # lucky seed
```

# Libraries 

```{r}
library(dplyr)                 # data manipulation 
library(scran)                 # scRNA-seq utilities 
library(scater)                # scRNA-seq utilities 
library(scLANE)                # interpretable trajectory DE 
library(glmmTMB)               # mixed-effects models 
library(ggplot2)               # plots 
library(scaffold)              # scRNA-seq simulation 
library(SingleCellExperiment)  # data structure 
select <- dplyr::select
```

# Functions

```{r}
# clone from https://github.com/jr-leary7/scLANE-Sims 
source("~/Desktop/PhD/Research/scLANE_Project/Code/scLANE-Sims/R/functions.R")
```

# Data 

## Simulation

Here we simulate a 3-subject scRNA-seq dataset using `{scaffold}` to generate dynamic genes. The function used below ensures that a large percentage (but not all) of the dynamic genes are conserved across subjects, which mimics the way that genes behave similarly (but not exactly the same way) during biological processes across individuals. 

```{r, results='hide'}
set.seed(312)
RcppZiggurat::zsetseed(312)
panc <- scRNAseq::BaronPancreasData()
sim_data <- simulate_scaffold_GEE(ref.dataset = panc, 
                                  perc.dyn.genes = 0.1, 
                                  n.cells = 900, 
                                  perc.allocation = rep(1/3, 3), 
                                  n.subjects = 3)
```

## Processing 

We process the simulated data in the typical way. 

```{r}
sim_data <- logNormCounts(sim_data)
var_decomp <- modelGeneVar(sim_data)
top2k_hvgs <- getTopHVGs(var_decomp, n = 2e3)
sim_data <- runPCA(sim_data, subset_row = top2k_hvgs)
reducedDim(sim_data, "PCAsub") <- reducedDim(sim_data, "PCA")[, 1:10, drop = FALSE]
sim_data <- runUMAP(sim_data, dimred = "PCAsub", n_dimred = 1:10)
g <- buildSNNGraph(sim_data, use.dimred = "PCAsub", k = 30)
clusters <- igraph::cluster_louvain(graph = g)$membership
colLabels(sim_data) <- factor(clusters)
```

## Visualization 

We see that the data are separated in PCA space by subject, and that each subject has their own trajectory across which cells are ordered. 

```{r}
plotPCA(sim_data, colour_by = "subject") + 
  theme_classic(base_size = 14)
plotPCA(sim_data, colour_by = "cell_time_normed") + 
  theme_classic(base_size = 14)
```

# Modeling 

```{r}
mod_data <- data.frame(EXP = counts(sim_data)[top2k_hvgs[50], ], 
                       PT = sim_data$cell_time_normed, 
                       ID = sim_data$subject)
plot(mod_data$PT, mod_data$EXP)
```


```{r}
m1 <- glmmTMB(EXP ~ PT + (1 + PT | ID), 
              data = mod_data, 
              family = nbinom1(), 
              se = TRUE, 
              REML = FALSE)
summary(m1)
```

```{r}
m1a <- glmmTMB(EXP ~ PT + (1 + PT | ID), 
               data = mod_data, 
               family = nbinom2(), 
               se = TRUE, 
               REML = FALSE)
summary(m1a)
```

```{r}
broom.mixed::tidy(m1)
broom.mixed::tidy(m1, effects="ran_vals", conf.int = TRUE)
```
